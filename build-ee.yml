---
- name: Build/Push/Install Custom EEs
  hosts: aap.gregsowell.com
  gather_facts: false
  vars:
    # aap username/pass
    controller_user: "{{ gen2_user }}"
    controller_pass: "{{ gen2_pword }}"

#    # what is the base EE that is used for building my custom EE
#    base_ee: registry.redhat.io/ansible-automation-platform-21/ee-supported-rhel8

    # what is the name of the new EE being built
    new_ee: all_ee_supported

    # what is the path where the EE build files are stored
    path_ee: /root/ansible-execution-environments
    # base folder for cloning EE
    base_ee_path: /root
    # private automation hub host
    pah_host: pah.gregsowell.com
    # ee repo
    ee_repo: https://github.com/gregsowell/ansible-execution-environments
    
    # credential name used in AAP
    pah_cred: Automation Hub Container Registry

#    # new version number for the pushed ee
#    new_ee_ver: 1.0.2

    # pah username/pass
    pah_user: "{{ gen1_user }}"
    pah_pass: "{{ gen1_pword }}"
    
    

  tasks:
  - name: Git clone the EE repo to ensure I have the newest files
    ansible.builtin.shell: "{{ base_ee_path }} git clone {{ ee_repo }}"
    
  - name: Grab the execution-environment.yml file to use as variables
    ansible.builtin.fetch:
      src: "{{ path_ee }}/{{ new_ee }}/execution-environment.yml"
      dest: execution-environment.yml
    register: ee_yml

  - name: Include the EE file as variables
    include_vars:
      file: "{{ ee_yml.dest }}"
      name: inc_vars

#  - name: Debug inc_vars
#    ansible.builtin.debug:
#      var: inc_vars

  - name: Setup some base variables
    ansible.builtin.set_fact:
      base_ee: "{{ inc_vars.build_arg_defaults.EE_BASE_IMAGE }}"
      new_ee_ver: "{{ inc_vars.version }}"

  - name: Grab the list of EEs to ensure the correct EE exists
    ansible.builtin.shell: podman image list
    changed_when: false
    register: ee_list

#  - name: debug ee_list
#    when: ee_list.stdout_lines is search(base_ee)
#    ansible.builtin.debug:
#      var: ee_list

  - name: Install the required base EE if not already present
    when: ee_list.stdout_lines is not search(base_ee)
#    when: ee_list.stdout_lines is not search(inc_vars.build_arg_defaults.EE_BASE_IMAGE)
    ansible.builtin.debug:
      msg: "Install the missing base EE here"

  - name: Begin the build process on the EE
    when: ee_list.stdout_lines is search(base_ee)
#    when: ee_list.stdout_lines is search(inc_vars.build_arg_defaults.EE_BASE_IMAGE)
    block:
      - name: Run the build on the selected new EE
        ansible.builtin.shell: "ansible-builder build --tag {{ new_ee }}"
        args:
          chdir: "{{ path_ee }}/{{new_ee}}"
        register: ee_build_out
        failed_when: ee_build_out.stdout_lines is not search('Complete!')

#      - name: debug ee_build_out
#        ansible.builtin.debug:
#          var: ee_build_out

  - name: Push EE to container registry
    ansible.builtin.shell: "podman push --creds={{ pah_user }}:{{ pah_pass }} localhost/{{ new_ee }}:latest docker://{{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }} --tls-verify=false"
    args:
      chdir: "{{ path_ee }}/{{new_ee}}"
    register: pah_push_out
    failed_when: pah_push_out.stderr_lines is not search('Storing signatures')

#  - name: Debug pah_push_out
#    ansible.builtin.debug:
#      var: pah_push_out

  - name: Collect credentials
    uri:
      url: "https://{{ inventory_hostname }}/api/v2/credentials/"
      user: "{{ controller_user }}"
      password: "{{ controller_pass }}"
      method: GET
      validate_certs: false
      force_basic_auth: true
      status_code:
        - 200
        - 201
        - 204
    changed_when: false
    register: aap_cred_out

#  - name: Debug aap_cred_out
#    ansible.builtin.debug:
#      var: aap_cred_out

  - name: Set ansible credential name to ID
    when: item.name == pah_cred
    ansible.builtin.set_fact:
      pah_cred_id: "{{ item.id }}"
    loop: "{{ aap_cred_out.json.results }}"

  - name: Collect EEs to check if it already exists
    uri:
      url: "https://{{ inventory_hostname }}/api/v2/execution_environments/"
      user: "{{ controller_user }}"
      password: "{{ controller_pass }}"
      method: GET
      validate_certs: false
      force_basic_auth: true
      status_code:
        - 200
        - 201
        - 204
    changed_when: false
    register: aap_ee_out

#  - name: Debug aap_ee_out
#    ansible.builtin.debug:
#      var: aap_ee_out

  - name: Set ansible ee id if name already exists
    when: item.name == new_ee
    ansible.builtin.set_fact:
      new_ee_id: "{{ item.id }}"
    loop: "{{ aap_ee_out.json.results }}"


  - name: Configure AAP for new EE
    when: new_ee_id is undefined
    vars:
      hosts: controllers
    uri:
      url: "https://{{ inventory_hostname }}/api/v2/execution_environments/"
      user: "{{ controller_user }}"
      password: "{{ controller_pass }}"
      method: POST
      validate_certs: false
      force_basic_auth: true
      body_format: json
      body: |
          {
              "name": "{{ new_ee }}",
              "image": "{{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }}",
              "description": "added by automation",
              "pull": "missing",
              "credential": "{{ pah_cred_id }}"
          }
      status_code:
        - 200
        - 201
        - 204
    failed_when: aap_conf_out.status != 201 and aap_conf_out.json.name is not search('already exists')
    register: aap_conf_out

#  - name: Debug aap_conf_out
#    ansible.builtin.debug:
#      var: aap_conf_out

  - name: If EE already exists on AAP, update version number
#    when: aap_conf_out.status == 400 and aap_conf_out.json.name is search('already exists')
    when: new_ee_id is defined
    vars:
      hosts: controllers
    uri:
      url: "https://{{ inventory_hostname }}/api/v2/execution_environments/{{ new_ee_id }}/"
      user: "{{ controller_user }}"
      password: "{{ controller_pass }}"
      method: PUT
      validate_certs: false
      force_basic_auth: true
      body_format: json
      body: |
          {
              "name": "{{ new_ee }}",
              "image": "{{ pah_host }}/{{ new_ee }}:{{ new_ee_ver }}",
              "description": "added by automation",
              "pull": "missing",
              "credential": "{{ pah_cred_id }}"
          }
      status_code:
        - 200
        - 201
        - 204
#    failed_when: aap_conf_out.status != 201 and aap_conf_out.json.name is not search('already exists')
    register: aap_conf_patch_out
